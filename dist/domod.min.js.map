{"version":3,"file":"domod.min.js","sources":["../src/Util.js","../src/Kernel.js","../src/index.js"],"sourcesContent":["var gid = (function () {\n    var n = 0;\n    return function () {\n        return n++;\n    };\n})();\n\nvar isBoolean = function (v) {\n    return typeof v === 'boolean';\n};\n\nvar isNumber = function (v) {\n    return typeof v === 'number';\n};\n\nvar isNumeric = function (v) {\n    var n = parseInt(v);\n    if (isNaN(n)) return false;\n    return (typeof v === 'number' || typeof v === 'string') && n == v;\n};\n\nvar isString = function (v) {\n    return typeof v === 'string';\n};\n\nvar isFunction = function (v) {\n    return typeof v === 'function';\n};\n\nvar isObject = function (v) {\n    return v != null && Object.prototype.toString.call(v) === '[object Object]';\n};\n\nvar isArray = function (v) {\n    return Object.prototype.toString.call(v) === '[object Array]';\n};\n\nvar isBasic = function (v) {\n    return v == null\n        || typeof v === 'boolean'\n        || typeof v === 'number'\n        || typeof v === 'string'\n        || typeof v === 'function';\n};\n\nvar isInstance = function (v, creator) {\n    return typeof creator === 'function' && v instanceof creator;\n};\n\nvar isDirectInstance = function (v, creator) {\n    return v.constructor === creator;\n};\n\nvar isNode = function (v) {\n    if (typeof Node !== 'function') return false;\n    return v instanceof Node;\n};\n\nvar isNamedNodeMap = function (v) {\n    return v instanceof NamedNodeMap;\n};\n\nvar isEventName = function (v) {\n    if (!isString(v) || !v.startsWith('on')) return false;\n    return v.substr(2); // TODO\n};\n\nvar isCSSSelector = function (v) {\n    return v.indexOf(' ') > 0 || v.indexOf('.') >= 0\n        || v.indexOf('[') >= 0 || v.indexOf('#') >= 0;\n};\n\nvar each = function (v, func, arrayReverse) {\n    if (isObject(v)) {\n        for (var p in v) {\n            if (!v.hasOwnProperty(p)) continue;\n            var r = func(v[p], p);\n            if (r === false) break;\n        }\n    } else if (isArray(v)) {\n        if (!arrayReverse) {\n            for (var i = 0, len = v.length; i < len; i++) {\n                var r = func(v[i], i);\n                if (r === false) break;\n            }\n        } else {\n            for (var i = v.length - 1; i >= 0; i--) {\n                var r = func(v[i], i);\n                if (r === false) break;\n            }\n        }\n    } else if (isNode(v)) {\n        var ret = false;\n        switch (v.nodeType) {\n            case Node.ELEMENT_NODE:\n                break;\n            case Node.TEXT_NODE:\n            case Node.COMMENT_NODE:\n            case Node.PROCESSING_INSTRUCTION_NODE:\n            case Node.DOCUMENT_NODE:\n            case Node.DOCUMENT_TYPE_NODE:\n            case Node.DOCUMENT_FRAGMENT_NODE:\n            default:\n                ret = true;\n        }\n        if (ret) return;\n        for (var i = 0, childNodes = v.childNodes, len = v.childNodes.length; i < len; i++) {\n            func(childNodes[i]);\n            each(childNodes[i], func);\n        }\n    } else if (isNamedNodeMap(v)) {\n        for (var i = 0, len = v.length; i < len; i++) {\n            var r = func(v[i]['nodeValue'], v[i]['nodeName']);\n            if (r === false) break;\n        }\n    } else if (v && isFunction(v.forEach)) {\n        v.forEach(func);\n    }\n};\n\nvar eachIndexOf = function (str, pat) {\n    var p0 = 0, p1;\n    var len = str.length;\n    var r = [];\n    while (p0 < len) {\n        p1 = str.indexOf(pat, p0);\n        if (p1 < len) {\n            r.push(p1);\n            p0 = p1 + pat.length;\n        }\n    }\n    return r;\n};\n\nvar eachUnique = function (arr, func) {\n    if (!isArray(arr)) return;\n    var map = {};\n    for (var i = 0, len = arr.length; i < len; i++) {\n        if (!isNumber(arr[i]) || !isString(arr[i]) || map[arr[i]]) continue;\n        map[arr[i]] = true;\n        var r = func(arr[i]);\n        if (r === false) break;\n    }\n};\n\nvar unique = function (arr) {\n    var r = [];\n    eachUnique(arr, function (v) {\n        r.push(v);\n    });\n    return r;\n};\n\nvar clone = function (val) {\n    var r = val;\n    if (isObject(val)) {\n        r = {};\n        each(val, function (v, p) {\n            r[p] = clone(v);\n        });\n    } else if (isArray(val)) {\n        r = [];\n        each(val, function (v) {\n            r.push(clone(v));\n        });\n    }\n    return r;\n};\n\nvar hasProperty = function (val, p) {\n    if (isObject(val)) {\n        return val.hasOwnProperty(p);\n    } else if (isArray(val)) {\n        var n = parseInt(p);\n        return isNumeric(p) && val.length > n && n >= 0;\n    }\n    return false;\n};\n\nvar clear = function (val, p, withBasicVal) {\n    var inRef = isString(p) || isNumber(p);\n    var target = inRef ? val[p] : val;\n\n    if (isObject(target) || isArray(target)) {\n        each(target, function (v, p) {\n            clear(target, p);\n        });\n        if (isArray(target)) {\n            shrinkArray(target);\n        }\n    }\n\n    if (inRef) {\n        val[p] = withBasicVal;\n    }\n};\n\nvar shrinkArray = function (arr, len) {\n    var limited = isNumber(len);\n    if (!limited) {\n        each(arr, function (v, i) {\n            if (v === undefined) arr.length--;\n        }, true);\n    } else {\n        each(arr, function (v, i) {\n            if (i >= len) arr.length--;\n            else return false;\n        }, true);\n        while (arr.length < len) {\n            arr.push(null);\n        }\n    }\n    return arr;\n};\n\nvar touchLeaves = function (obj) {\n    each(obj, function (v, p) {\n        if (isBasic(v)) {\n            obj[p] = v;\n        } else {\n            touchLeaves(v);\n        }\n    });\n};\n\nvar extend = function (dest, srcs, clean) {\n    if (!isObject(dest)) return null;\n    var args = Array.prototype.slice.call(arguments, 1,\n        arguments[arguments.length - 1] === true ? (arguments.length - 1) : arguments.length);\n    clean = arguments[arguments.length - 1] === true ? true : false;\n\n    function extendObj(obj, src, clean) {\n        if (!isObject(src)) return;\n        each(src, function (v, p) {\n            if (!hasProperty(obj, p) || isBasic(v)) {\n                if (obj[p] !== v) {\n                    obj[p] = clone(v);\n                }\n            } else {\n                extendObj(obj[p], v, clean);\n            }\n        });\n        if (clean) {\n            each(obj, function (v, p) {\n                if (!hasProperty(src, p)) {\n                    clear(obj, p);\n                }\n            });\n            if (isArray(obj)) {\n                shrinkArray(obj);\n            }\n        }\n    }\n\n    each(args, function (src) {\n        extendObj(dest, src, clean);\n    });\n    return dest;\n};\n\nvar allRefs = function (obj) {\n    var refs = [];\n    each(obj, function (v, p) {\n        if (isObject(v)) {\n            var f = allRefs(v);\n            each(f, function (vv, pp) {\n                refs.push(p + '.' + pp);\n            });\n        } else {\n            refs.push(p);\n        }\n    })\n    return refs;\n};\n\nvar refData = function (root, refPath, value) {\n    var toSet = arguments.length >= 3;\n    var v = root;\n    var paths = [];\n    if (refPath) paths = refPath.split('.');\n\n    if (!toSet) {\n        while (paths.length) {\n            if (isBasic(v)) return undefined;\n            v = v[paths.shift()];\n        }\n        return v;\n    } else {\n        while (paths.length) {\n            if (isBasic(v)) return undefined;\n            if (paths.length === 1) {\n                v[paths.shift()] = value;\n            } else {\n                v = v[paths.shift()];\n            }\n        }\n        return value;\n    }\n};\n\nfunction addEvent($el, eventName, handler, useCapture) {\n    if ($el.addEventListener) {\n        $el.addEventListener(eventName, handler, !!useCapture);\n    } else {\n        if (eventName === 'input') {\n            eventName = 'propertychange';\n        }\n        $el.attachEvent('on' + eventName, handler);\n    }\n}\n\nfunction flatten(root, objectFilter, clean) {\n    objectFilter = objectFilter || function () { return true; };\n    var ext = {};\n    each(root, function (v, p) {\n        if (isObject(v) && !objectFilter(v)) {\n            var f = flatten(v, objectFilter, clean);\n            each(f, function (vv, pp) {\n                ext[p + '.' + pp] = vv;\n            });\n        } else {\n            if (objectFilter(v) || !clean)\n                ext[p] = v;\n        }\n    })\n    return ext;\n}\n\nexport {\n    gid,\n    isBoolean,\n    isNumber,\n    isNumeric,\n    isString,\n    isFunction,\n    isObject,\n    isArray,\n    isBasic,\n    isInstance,\n    isDirectInstance,\n    isNode,\n    isNamedNodeMap,\n    isEventName,\n    isCSSSelector,\n    each,\n    eachIndexOf,\n    eachUnique,\n    unique,\n    clone,\n    hasProperty,\n    clear,\n    shrinkArray,\n    touchLeaves,\n    extend,\n    allRefs,\n    refData,\n    addEvent,\n    flatten\n}\n","import * as Util from './Util'\n\nvar Store = {};\nvar Dnstreams = {};\nvar ResultsIn = {};\nvar Upstreams = {};\nvar ResultsFrom = {};\nvar Laziness = {};\nvar PropKernelTable = {};\nvar KernelStatus = {};\n\nfunction get(ref, root) {\n    if (root === undefined) root = Store;\n    if ((!Util.isObject(root) && !Util.isNode(root)) || !Util.isString(ref)) return null;\n    var node = root;\n    var refs = ref.split('.');\n    while (refs.length >= 1) {\n        if (refs.length === 1) {\n            return {\n                target: node,\n                property: refs[0]\n            };\n        }\n        node = node[refs.shift()];\n        if (!Util.isObject(node) && !Util.isNode(node)) return null;\n    }\n    return null;\n}\n\nfunction set(ref, val, root) {\n    var obj = get(ref, root);\n    if (obj) obj.target[obj.property] = val;\n}\n\nfunction update(ref, root) {\n    var obj = get(ref, root);\n    if (!obj) return null;\n    var proppath = fullpathOf(ref, root);\n    if (!ResultsFrom[proppath]) return obj.target[obj.property];\n    var value = ResultsFrom[proppath].f.apply(Store, ResultsFrom[proppath].deps.map(function (p) { return update(p) }));\n    obj.target[obj.property] = value;\n    return value;\n}\n\nfunction fullpathOf(ref, root) {\n    if (root === undefined) return ref;\n    return register(root) + '.' + ref;\n}\n\nfunction register(root) {\n    if (!Util.isObject(root) && !Util.isNode(root)) return null;\n    if (!root.__kernel_root) {\n        var id = 'kr_' + Util.gid();\n        if (!Util.isNode(root)) {\n            Object.defineProperty(root, '__kernel_root', {\n                value: id\n            });\n        } else {\n            root.__kernel_root = id;\n        }\n        Store[id] = root;\n    }\n    return root.__kernel_root;\n}\n\nfunction formatStream(stream, root) {\n    if (Util.isObject(stream) || Util.isString(stream)) stream = [stream];\n    if (Util.isArray(stream)) {\n        return stream.map(function (a) {\n            if (Util.isObject(a)) return register(a.root) + '.' + a.alias;\n            if (Util.isString(a)) return register(root) + '.' + a;\n            return null;\n        });\n    } else {\n        return [];\n    }\n}\n\nfunction propKernelOrder(proppath) {\n    if (PropKernelTable[proppath] === undefined) return 0;\n    return PropKernelTable[proppath].length;\n}\n\n/**\n * Kernel constructor function.\n * @constructor\n */\nfunction Kernel(root, path, relations) {\n    var obj = get(path, root);\n    if (obj == null) return;\n    var proppath = register(root) + '.' + path;\n    var __kid = proppath + '#' + propKernelOrder(proppath);\n    Object.defineProperty(this, '__kid', {\n        value: __kid\n    });\n    KernelStatus[this.__kid] = 1;\n    var value = obj.target[obj.property];\n    if (PropKernelTable[proppath] === undefined) {\n        PropKernelTable[proppath] = [];\n        if (Util.hasProperty(obj.target, obj.property))\n            delete obj.target[obj.property];\n    }\n    PropKernelTable[proppath].push(1);\n\n    var dnstream = formatStream(relations.dnstream);\n    var resultIn = relations.resultIn;\n    var upstream = formatStream(relations.upstream);\n    var resultFrom = relations.resultFrom;\n    var lazy = !!relations.lazy;\n    if (Util.hasProperty(relations, 'value')) {\n        value = relations.value;\n    }\n    if (!Dnstreams[proppath]) Dnstreams[proppath] = {};\n    dnstream.forEach(function (p) {\n        if (!Upstreams[p]) Upstreams[p] = {};\n        if (!Upstreams[p][proppath]) Upstreams[p][proppath] = {};\n        Upstreams[p][proppath][__kid] = 1;\n        if (!Dnstreams[proppath][p]) Dnstreams[proppath][p] = {};\n        Dnstreams[proppath][p][__kid] = 1;\n    });\n    if (!ResultsIn[proppath]) ResultsIn[proppath] = [];\n    ResultsIn[proppath].push(Util.isFunction(resultIn) ? resultIn : null);\n    if (!Upstreams[proppath]) Upstreams[proppath] = {};\n    upstream.forEach(function (p) {\n        if (!Upstreams[proppath][p]) Upstreams[proppath][p] = {};\n        Upstreams[proppath][p][__kid] = 1;\n        if (!Dnstreams[p]) Dnstreams[p] = {};\n        if (!Dnstreams[p][proppath]) Dnstreams[p][proppath] = {};\n        Dnstreams[p][proppath][__kid] = 1;\n    });\n    if (Util.isFunction(resultFrom)) ResultsFrom[proppath] = {\n        f: resultFrom,\n        k: this.__kid,\n        deps: upstream\n    };\n    if (lazy) Laziness[proppath] = true;\n\n    if (PropKernelTable[proppath].length === 1) {\n        if (!Util.isNode(obj.target)) {\n            Object.defineProperty(obj.target, obj.property, {\n                get: function () {\n                    if (ResultsFrom[proppath] && KernelStatus[ResultsFrom[proppath].k] !== 0) {\n                        return update(proppath);\n                    }\n                    return value;\n                },\n                set: function (val) {\n                    if (val === value) return;\n                    value = val;\n                    ResultsIn[proppath] && ResultsIn[proppath].forEach(function (f, k) {\n                        f && (KernelStatus[proppath + '#' + k] !== 0) && f.apply(root, [val]);\n                    });\n                    if (Dnstreams[proppath]) {\n                        Util.each(Dnstreams[proppath], function (kmap, ds) {\n                            var toUpdateDnstream = false;\n                            Util.each(kmap, function (v, k) {\n                                if (KernelStatus[k] !== 0) {\n                                    toUpdateDnstream = true;\n                                    return false;\n                                }\n                            });\n                            if (toUpdateDnstream && ResultsFrom[ds] && !Laziness[ds])\n                                update(ds);\n                        });\n                    }\n                },\n                // configurable: true,\n                enumerable: true\n            });\n            obj.target[obj.property];\n            // obj.target[obj.property] = obj.target[obj.property];\n        } else {\n            if (Util.isFunction(resultFrom))\n                obj.target[obj.property] = resultFrom();\n        }\n    }\n}\n\nKernel.prototype.disable = function () {\n    KernelStatus[this.__kid] = 0;\n};\nKernel.prototype.enable = function () {\n    KernelStatus[this.__kid] = 1;\n};\nKernel.prototype.destroy = function () {\n    // TODO\n};\n\n/**\n * Whether an object is a relation definition.\n * @param {Object} obj \n * @return {Boolean}\n */\nfunction isRelationDefinition(obj) {\n    if (!Util.isObject(obj)) return false;\n    var r = true;\n    var specProps = {\n        __isRelation: 2, // !\n        dnstream: 1, // *\n        resultIn: 1, // *\n        upstream: 1, // *\n        resultFrom: 1, // *\n        lazy: true,\n        value: true\n    };\n    var count = 0;\n    Util.each(obj, function (v, p) {\n        if (specProps[p] === 2) {\n            r = true;\n            count++;\n            return false;\n        }\n        if (!specProps[p]) {\n            r = false;\n            return false;\n        }\n        if (specProps[p] === 1) {\n            count++;\n        }\n    });\n    return r && (count > 0);\n}\n\n/**\n * Define and bind data with relations in a whole (PropertyPath => Relation) map.\n * @param {Object} obj                  The data object. If `relations` is undefined, it contains relations.\n * @param {Object|Undefined} relations  A map from propertyPath to relation.\n */\nfunction Relate(obj, relations) {\n    var fr;\n    if (arguments.length === 1) {\n        if (!Util.isObject(obj)) return null;\n        fr = Util.flatten(obj, isRelationDefinition, true);\n    } else if (Util.isObject(relations)) {\n        fr = Util.flatten(relations, isRelationDefinition, true);\n    } else {\n        return null;\n    }\n    Util.each(fr, function (rel, p) {\n        new Kernel(obj, p, rel);\n    });\n\n    return obj;\n}\n\nexport { Kernel, Relate }\n","// import './Polyfill'\nimport * as Util from './Util'\nimport { Kernel, Relate } from './Kernel'\n\n/**\n * Bind data to DOM.\n * @param  {HTMLElement} $el            [description]\n * @param  {Object} ref                 [description]\n * @return {[type]}                     [description]\n */\nfunction Bind($el, ref) {\n    if (!Util.isNode($el) || !Util.isObject(ref)) return;\n\n    if ($el.nodeType === Node.ELEMENT_NODE && !$el[DefaultConf.domBoundFlag]) {\n        $el[DefaultConf.domBoundFlag] = true; /* Set a binding flag. */\n        Util.each($el.attributes, function (value, name) {\n            if (!name.startsWith(DefaultConf.attrPrefix)) return;\n            name = name.substr(DefaultConf.attrPrefix.length).toLowerCase();\n            switch (name) {\n                case 'value':\n                    Util.addEvent($el, 'input', function (e) {\n                        Util.refData(ref, value, this.value);\n                    }, false);\n                    Relate(ref, relationFromExprToRef(value, ref, $el, name));\n                    break;\n                case 'innertext':\n                case 'innerhtml':\n                    Relate(ref, relationFromExprToRef(value, ref, $el, (name === 'innertext') ? 'innerText' : 'innerHTML'));\n                    break;\n                case 'class':\n                    Relate(ref, relationFromExprToRef(value, ref, $el, 'className', function () {\n                        var re = evaluateExpression(value, ref);\n                        var classList = [];\n                        if (Util.isObject(re)) {\n                            Util.each(re, function (v, p) {\n                                v && classList.push(p);\n                            });\n                        } else if (Util.isArray(re)) {\n                            Util.each(re, function (v) {\n                                if (Util.isString(v)) classList.push(v);\n                                else if (Util.isObject(v)) {\n                                    Util.each(v, function (vv, pp) {\n                                        vv && classList.push(pp);\n                                    });\n                                }\n                            });\n                        }\n                        return classList.join(' ');\n                    }));\n                    break;\n                case 'style':\n                    Relate(ref, relationFromExprToRef(value, ref, $el, 'style.cssText', function () {\n                        var re = evaluateExpression(value, ref);\n                        var stylePairs = [];\n                        if (Util.isObject(re)) {\n                            Util.each(re, function (v, p) {\n                                stylePairs.push(p + ':' + v);\n                            });\n                        }\n                        return stylePairs.join(';');\n                    }));\n                    break;\n                default:\n                    var eventName = Util.isEventName(name);\n                    if (eventName) { /* Event */\n                        Util.addEvent($el, eventName, function (e) {\n                            new Function(['e'].concat(Object.keys(ref)).join(','), value).apply($el, Object.values(ref));\n                        }, false);\n                    } else { /* Attribute */\n                        var resultIn = function (v) {\n                            $el.setAttribute(name, new Function(Object.keys(ref).join(','), 'return ' + value).apply($el, Object.values(ref)));\n                        };\n                        var rels = {};\n                        Util.each(parseRefsInExpr(value), function (r) {\n                            rels[r] = {\n                                resultIn: resultIn\n                            };\n                        });\n                        Relate(ref, rels);\n                    }\n            }\n        });\n        Util.each($el, function (node) {\n            Bind(node, ref);\n        });\n    } else if ($el.nodeType === Node.TEXT_NODE) {\n        var expr = parseExprsInRawText($el.nodeValue).join(';');\n        if (expr === '') return;\n        Relate(ref, relationFromExprToRef(expr, ref, $el, 'nodeValue', function () {\n            return evaluateRawTextWithTmpl($el.nodeValue, ref);\n        }));\n    }\n}\n\n/**\n * Evaluate an expression with a data object.\n * @param {String} expr \n * @param {Object} ref \n * @return {*}\n */\nfunction evaluateExpression(expr, ref) {\n    expr = replaceTmplInStrLiteral(expr);\n    var params = Object.keys(ref);\n    var args = Object.values(ref);\n    Util.each(args, function (v, i) {\n        if (Util.isFunction(v))\n            args[i] = v.bind(ref);\n    });\n    var result = null;\n    try {\n        result = (new Function(params.join(','), 'return ' + expr)).apply(ref, args);\n    } catch (e) {}\n    return result;\n}\n\n/**\n * Fix template strings in a string literal to JavaScript string-concat expressions.\n * @param {String} str \n * @return {String}\n * @example \"'My name is {{name}}.'\" => \"'My name is ' + (name) + '.'\"\n */\nfunction replaceTmplInStrLiteral(str) {\n    var reg = /{{([^{}]*)}}/g;\n    return str.replace(reg, function (match, p1) {\n        return '\\' + (' + p1 + ') + \\'';\n    });\n}\n\n/**\n * Evaluate a raw text with template expressions.\n * @param {String} text \n * @param {Object} ref \n * @return {String}\n * @example ('My name is {{name}}.', { name: 'Tom' }) => 'My name is Tom.'\n */\nfunction evaluateRawTextWithTmpl(text, ref) {\n    var reg = /{{([^{}]*)}}/g;\n    var result = text.replace(reg, function (match, p1) {\n        return evaluateExpression(p1, ref);\n    });\n    return result;\n}\n\n/**\n * Parse reference paths from an expression string.\n * @param {String} expr \n * @return {Array<String>}\n */\nfunction parseRefsInExpr(expr) {\n    expr = ';' + expr + ';';\n    var reg = /([a-zA-Z$_][0-9a-zA-Z$_]*)(\\.[a-zA-Z$_][0-9a-zA-Z$_]*)*/g;\n    return expr.match(reg);\n}\n\n/**\n * Parse template expression strings from a raw text such as a text node value.\n * @param {String} text     [description]\n * @return {Array<String>}  [description]\n * @example 'My name is {{name}}. I\\'m {{age}} years old.' => ['name', 'age']\n */\nfunction parseExprsInRawText(text) {\n    var reg = /{{([^{}]*)}}/g;\n    var exprs = [];\n    text.replace(reg, function (match, p1) {\n        exprs.push(p1);\n        return '';\n    });\n    return exprs;\n}\n\n/**\n * Get relations from an expression string to the data.\n * @param {String}      expr \n * @param {Object}      ref \n * @param {Function}    resultFrom \n * @return {Object}\n */\nfunction relationFromExprToRef(expr, ref, target, proppath, resultFrom) {\n    function getAllRefs(expr, ref) {\n        var subData = {};\n        Util.each(parseRefsInExpr(expr), function (r) {\n            subData[r] = Util.refData(ref, r);\n        });\n        return Util.allRefs(subData);\n    }\n    var resultIn = function () {\n        Util.refData(target, proppath, (resultFrom || function () {\n            return evaluateExpression(expr, ref);\n        })());\n    };\n    var r = {};\n    getAllRefs(expr, ref).forEach(function (ref) {\n        r[ref] = {\n            resultIn: resultIn\n        };\n    });\n    resultIn();\n    return r;\n}\n\n/**\n * Unbind data from DOM.\n * @param       {[type]} $el      [description]\n * @param       {[type]} ref      [description]\n * @param       {[type]} relation [description]\n * @constructor\n */\nfunction Unbind($el, ref, relation) {\n    // TODO\n}\n\n/**\n * Default configurations.\n * @type {Object}\n */\nvar DefaultConf = {\n    attrPrefix: 'm-',\n    domBoundFlag: '__dmd_bound'\n};\n\n/**\n * Constructor.\n * @param {*}  \n * @param {*} ref \n */\nvar DMD = function ($el, ref) {\n    Bind.call(this, $el, ref);\n};\n\nexport {\n    Kernel,\n    Relate,\n    DMD\n}\n"],"names":["addEvent","$el","eventName","handler","useCapture","addEventListener","attachEvent","flatten","root","objectFilter","clean","ext","each","v","p","isObject","f","vv","pp","get","ref","undefined","Store","Util.isObject","Util.isNode","Util.isString","node","refs","split","length","target","property","shift","update","obj","proppath","fullpathOf","ResultsFrom","value","apply","deps","map","register","__kernel_root","id","Util.gid","Object","defineProperty","formatStream","stream","Util.isArray","a","alias","propKernelOrder","PropKernelTable","Kernel","path","relations","__kid","this","KernelStatus","Util.hasProperty","push","dnstream","resultIn","upstream","resultFrom","lazy","Dnstreams","forEach","Upstreams","ResultsIn","Util.isFunction","k","Laziness","set","val","Util.each","kmap","ds","toUpdateDnstream","enumerable","isRelationDefinition","r","specProps","__isRelation","count","Relate","fr","arguments","Util.flatten","rel","Bind","nodeType","Node","ELEMENT_NODE","DefaultConf","domBoundFlag","TEXT_NODE","expr","parseExprsInRawText","nodeValue","join","relationFromExprToRef","evaluateRawTextWithTmpl","attributes","name","startsWith","attrPrefix","substr","toLowerCase","Util.addEvent","e","Util.refData","re","evaluateExpression","classList","stylePairs","Util.isEventName","Function","concat","keys","values","setAttribute","rels","parseRefsInExpr","replaceTmplInStrLiteral","params","args","i","bind","result","str","reg","replace","match","p1","text","exprs","subData","Util.allRefs","getAllRefs","gid","n","isNumeric","parseInt","isNaN","isString","isFunction","prototype","toString","call","isArray","isBasic","isNode","isNamedNodeMap","NamedNodeMap","isEventName","func","arrayReverse","hasOwnProperty","len","ret","COMMENT_NODE","PROCESSING_INSTRUCTION_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","childNodes","hasProperty","allRefs","refData","refPath","toSet","paths","disable","enable","destroy"],"mappings":"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"}